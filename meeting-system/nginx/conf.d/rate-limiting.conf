# ============================================================================
# Nginx高级限流配置
# ============================================================================

# ============================================================================
# 基础限流区域定义
# ============================================================================

# 基于IP的限流
limit_req_zone $binary_remote_addr zone=global_limit:20m rate=100r/s;
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=50r/s;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/s;
limit_req_zone $binary_remote_addr zone=upload_limit:10m rate=2r/s;
limit_req_zone $binary_remote_addr zone=ws_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=ai_limit:10m rate=3r/s;

# 基于用户的限流（从JWT Token中提取用户ID）
map $http_authorization $user_id {
    default "";
    ~^Bearer\s+([A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+)$ $1;
}

# 解析JWT获取用户ID（简化版，实际应该解析JWT payload）
map $user_id $extracted_user_id {
    default "";
    ~.+ $user_id;  # 这里应该实现JWT解析逻辑
}

limit_req_zone $extracted_user_id zone=user_api_limit:10m rate=200r/s;
limit_req_zone $extracted_user_id zone=user_upload_limit:10m rate=10r/s;

# ============================================================================
# 连接数限制
# ============================================================================

# 基于IP的连接数限制
limit_conn_zone $binary_remote_addr zone=conn_per_ip:10m;
limit_conn_zone $server_name zone=conn_per_server:10m;

# 基于用户的连接数限制
limit_conn_zone $extracted_user_id zone=conn_per_user:10m;

# ============================================================================
# 动态限流（基于响应状态）
# ============================================================================

# 基于错误率的动态限流
map $status $is_error {
    ~^[23] 0;  # 2xx, 3xx 不是错误
    default 1; # 其他都是错误
}

# 错误请求限流
limit_req_zone $binary_remote_addr zone=error_limit:10m rate=10r/s;

# ============================================================================
# 地理位置限流
# ============================================================================

# 基于国家的限流（需要GeoIP模块）
# geo $country {
#     default US;
#     include /etc/nginx/geoip/country.conf;
# }

# map $country $country_rate_limit {
#     default 100r/s;
#     CN 200r/s;      # 中国用户更高限制
#     US 150r/s;      # 美国用户
#     ~^(RU|KP)$ 10r/s; # 限制某些国家
# }

# limit_req_zone $binary_remote_addr zone=geo_limit:10m rate=$country_rate_limit;

# ============================================================================
# 时间段限流
# ============================================================================

# 基于时间的限流
map $time_iso8601 $hour {
    default 0;
    ~T([0-9][0-9]): $1;
}

map $hour $time_based_rate {
    default 50r/s;
    ~^(09|10|11|14|15|16)$ 100r/s;  # 工作时间更高限制
    ~^(00|01|02|03|04|05)$ 20r/s;   # 深夜较低限制
}

# ============================================================================
# User-Agent限流
# ============================================================================

# 基于User-Agent的限流
map $http_user_agent $ua_rate_limit {
    default 50r/s;
    ~bot 10r/s;           # 爬虫限制
    ~crawler 5r/s;        # 爬虫限制
    ~spider 5r/s;         # 爬虫限制
    ~curl 20r/s;          # curl工具
    ~wget 20r/s;          # wget工具
    ~postman 100r/s;      # Postman测试工具
}

limit_req_zone $binary_remote_addr zone=ua_limit:10m rate=$ua_rate_limit;

# ============================================================================
# 请求大小限流
# ============================================================================

# 基于请求大小的限流
map $request_length $size_based_rate {
    default 50r/s;
    ~^[0-9]{1,3}$ 100r/s;      # 小请求 (<1KB)
    ~^[0-9]{4,5}$ 50r/s;       # 中等请求 (1KB-100KB)
    ~^[0-9]{6,}$ 10r/s;        # 大请求 (>100KB)
}

# ============================================================================
# 自适应限流
# ============================================================================

# 基于服务器负载的动态限流
map $upstream_response_time $load_based_rate {
    default 50r/s;
    ~^0\.[0-9]$ 100r/s;        # 响应时间 < 1s
    ~^[1-2]\. 30r/s;           # 响应时间 1-2s
    ~^[3-9]\. 10r/s;           # 响应时间 > 3s
}

# ============================================================================
# 白名单配置
# ============================================================================

# 内网IP白名单
geo $internal_ip {
    default 0;
    127.0.0.1/32 1;
    10.0.0.0/8 1;
    172.16.0.0/12 1;
    192.168.0.0/16 1;
}

# 管理员IP白名单
geo $admin_ip {
    default 0;
    # 192.168.1.100/32 1;  # 管理员IP
    # 10.0.1.50/32 1;      # 另一个管理员IP
}

# 可信服务IP白名单
geo $trusted_service_ip {
    default 0;
    # 10.0.2.0/24 1;       # 监控服务网段
    # 172.16.1.0/24 1;     # CI/CD服务网段
}

# ============================================================================
# 限流绕过逻辑
# ============================================================================

# 组合白名单
map $internal_ip$admin_ip$trusted_service_ip $bypass_rate_limit {
    default 0;
    ~1 1;  # 任何一个白名单匹配就绕过限流
}

# ============================================================================
# 限流状态码和响应
# ============================================================================

# 自定义限流响应
limit_req_status 429;
limit_conn_status 429;

# 限流日志格式
log_format rate_limit '$remote_addr - $remote_user [$time_local] '
                     '"$request" $status $body_bytes_sent '
                     '"$http_referer" "$http_user_agent" '
                     'rate_limited="$limit_req_status" '
                     'zone="$limit_req_zone"';

# ============================================================================
# 限流应用示例
# ============================================================================

# 在server块中使用这些限流配置的示例：

# # 全局限流
# limit_req zone=global_limit burst=200 nodelay;
# limit_conn conn_per_ip 20;
# limit_conn conn_per_server 10000;

# # 跳过白名单IP的限流
# if ($bypass_rate_limit) {
#     set $no_rate_limit 1;
# }

# # API接口限流
# location /api/ {
#     if ($no_rate_limit != 1) {
#         limit_req zone=api_limit burst=100 nodelay;
#         limit_req zone=user_api_limit burst=200 nodelay;
#     }
#     
#     # 其他配置...
# }

# # 认证接口特殊限流
# location /api/v1/auth/ {
#     if ($no_rate_limit != 1) {
#         limit_req zone=auth_limit burst=10 nodelay;
#     }
#     
#     # 记录认证尝试
#     access_log /var/log/nginx/auth.log rate_limit;
#     
#     # 其他配置...
# }

# # 上传接口限流
# location /api/v1/media/upload {
#     if ($no_rate_limit != 1) {
#         limit_req zone=upload_limit burst=5 nodelay;
#         limit_req zone=user_upload_limit burst=10 nodelay;
#     }
#     
#     # 连接数限制
#     limit_conn conn_per_user 3;
#     
#     # 其他配置...
# }

# # WebSocket连接限流
# location /ws/ {
#     if ($no_rate_limit != 1) {
#         limit_req zone=ws_limit burst=20 nodelay;
#     }
#     
#     # WebSocket特殊连接限制
#     limit_conn conn_per_user 5;
#     
#     # 其他配置...
# }

# # AI接口严格限流
# location /api/v1/ai/ {
#     if ($no_rate_limit != 1) {
#         limit_req zone=ai_limit burst=5 nodelay;
#     }
#     
#     # AI接口连接限制更严格
#     limit_conn conn_per_user 2;
#     
#     # 其他配置...
# }

# ============================================================================
# 限流监控和告警
# ============================================================================

# 限流事件记录
access_log /var/log/nginx/rate_limit.log rate_limit if=$limit_req_status;

# 可以通过日志分析工具监控限流情况：
# - 统计被限流的IP
# - 分析限流模式
# - 调整限流参数
