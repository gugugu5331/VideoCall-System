# ============================================================================
# Nginx安全配置
# ============================================================================

# ============================================================================
# 安全头部配置
# ============================================================================

# 隐藏Nginx版本信息
server_tokens off;

# 防止点击劫持
add_header X-Frame-Options "SAMEORIGIN" always;

# 防止MIME类型嗅探
add_header X-Content-Type-Options "nosniff" always;

# XSS防护
add_header X-XSS-Protection "1; mode=block" always;

# 强制HTTPS
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

# 引用策略
add_header Referrer-Policy "strict-origin-when-cross-origin" always;

# 权限策略
add_header Permissions-Policy "geolocation=(), microphone=(self), camera=(self), payment=(), usb=()" always;

# ============================================================================
# 请求过滤和验证
# ============================================================================

# 阻止常见的恶意请求
location ~* \.(php|asp|aspx|jsp|cgi)$ {
    return 444;  # 直接关闭连接
}

# 阻止隐藏文件访问
location ~ /\. {
    deny all;
    access_log off;
    log_not_found off;
}

# 阻止备份文件访问
location ~* \.(bak|backup|old|orig|original|tmp|temp|~)$ {
    deny all;
    access_log off;
    log_not_found off;
}

# 阻止配置文件访问
location ~* \.(conf|config|ini|log|sql|yml|yaml|json)$ {
    deny all;
    access_log off;
    log_not_found off;
}

# ============================================================================
# User-Agent过滤
# ============================================================================

# 阻止恶意爬虫和扫描器
if ($http_user_agent ~* (nmap|nikto|wikto|sf|sqlmap|bsqlbf|w3af|acunetix|havij|appscan)) {
    return 444;
}

# 阻止空User-Agent
if ($http_user_agent = "") {
    return 444;
}

# ============================================================================
# 请求方法限制
# ============================================================================

# 只允许特定HTTP方法
if ($request_method !~ ^(GET|HEAD|POST|PUT|DELETE|OPTIONS)$) {
    return 405;
}

# ============================================================================
# 请求大小限制
# ============================================================================

# 限制请求URI长度
if ($request_uri ~ "^.{2048,}") {
    return 414;
}

# 限制请求头大小
large_client_header_buffers 4 16k;

# ============================================================================
# SQL注入防护
# ============================================================================

# 阻止SQL注入尝试
set $block_sql_injections 0;

if ($query_string ~ "union.*select.*\(") {
    set $block_sql_injections 1;
}

if ($query_string ~ "union.*all.*select.*") {
    set $block_sql_injections 1;
}

if ($query_string ~ "concat.*\(") {
    set $block_sql_injections 1;
}

if ($query_string ~ "insert.*into") {
    set $block_sql_injections 1;
}

if ($query_string ~ "delete.*from") {
    set $block_sql_injections 1;
}

if ($query_string ~ "drop.*table") {
    set $block_sql_injections 1;
}

if ($block_sql_injections = 1) {
    return 403;
}

# ============================================================================
# XSS防护
# ============================================================================

# 阻止XSS尝试
set $block_xss 0;

if ($query_string ~ "(<|%3C).*script.*(>|%3E)") {
    set $block_xss 1;
}

if ($query_string ~ "(<|%3C).*iframe.*(>|%3E)") {
    set $block_xss 1;
}

if ($query_string ~ "(<|%3C).*object.*(>|%3E)") {
    set $block_xss 1;
}

if ($query_string ~ "(<|%3C).*embed.*(>|%3E)") {
    set $block_xss 1;
}

if ($query_string ~ "(<|%3C).*applet.*(>|%3E)") {
    set $block_xss 1;
}

if ($query_string ~ "javascript:") {
    set $block_xss 1;
}

if ($query_string ~ "vbscript:") {
    set $block_xss 1;
}

if ($block_xss = 1) {
    return 403;
}

# ============================================================================
# 文件包含攻击防护
# ============================================================================

# 阻止文件包含尝试
set $block_file_injections 0;

if ($query_string ~ "[a-zA-Z0-9_]=http://") {
    set $block_file_injections 1;
}

if ($query_string ~ "[a-zA-Z0-9_]=https://") {
    set $block_file_injections 1;
}

if ($query_string ~ "[a-zA-Z0-9_]=(\.\.//?)") {
    set $block_file_injections 1;
}

if ($query_string ~ "[a-zA-Z0-9_]=/([a-z0-9_.]//?)+") {
    set $block_file_injections 1;
}

if ($block_file_injections = 1) {
    return 403;
}

# ============================================================================
# 目录遍历防护
# ============================================================================

# 阻止目录遍历尝试
if ($request_uri ~* "(\.\./|\.\.\%2f|\.\.\%5c)") {
    return 403;
}

# ============================================================================
# 命令注入防护
# ============================================================================

# 阻止命令注入尝试
set $block_command_injections 0;

if ($query_string ~ ";.*\s*(ls|pwd|wget|curl|cat|nc|netcat)") {
    set $block_command_injections 1;
}

if ($query_string ~ "\|.*\s*(ls|pwd|wget|curl|cat|nc|netcat)") {
    set $block_command_injections 1;
}

if ($query_string ~ "`.*\s*(ls|pwd|wget|curl|cat|nc|netcat)") {
    set $block_command_injections 1;
}

if ($block_command_injections = 1) {
    return 403;
}

# ============================================================================
# 速率限制增强
# ============================================================================

# 慢速攻击防护
client_body_timeout 10s;
client_header_timeout 10s;
send_timeout 10s;

# 连接限制
limit_conn_status 429;
limit_req_status 429;

# ============================================================================
# 日志记录
# ============================================================================

# 安全事件日志格式
log_format security '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" '
                    'blocked_reason="$block_reason"';

# 记录被阻止的请求
access_log /var/log/nginx/security.log security;
