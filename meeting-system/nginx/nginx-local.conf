# ============================================================================
# Nginx API Gateway Configuration - 智能视频会议平台 (本地开发环境)
# ============================================================================
# 功能：
# 1. 统一API入口，客户端只与网关通信
# 2. 负载均衡与健康检查
# 3. 限流与DDoS防护
# 4. SSL/TLS终止
# 5. 请求路由与转发
# 6. 缓存与压缩
# 7. 安全防护（XSS、CSRF、SQL注入等）
# 8. 日志与监控
# ============================================================================

user root;
worker_processes auto;  # 自动根据CPU核心数设置
worker_rlimit_nofile 65535;  # 增加文件描述符限制
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;  # 每个worker的最大连接数
    use epoll;  # Linux高性能事件模型
    multi_accept on;  # 一次接受多个连接
    accept_mutex off;  # 关闭accept互斥锁，提高性能
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # ========================================================================
    # 日志配置
    # ========================================================================

    # 详细日志格式（包含性能指标）
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    # JSON格式日志（便于日志分析）
    log_format json_combined escape=json
        '{'
            '"time_local":"$time_local",'
            '"remote_addr":"$remote_addr",'
            '"remote_user":"$remote_user",'
            '"request":"$request",'
            '"status":"$status",'
            '"body_bytes_sent":"$body_bytes_sent",'
            '"request_time":"$request_time",'
            '"http_referrer":"$http_referer",'
            '"http_user_agent":"$http_user_agent",'
            '"http_x_forwarded_for":"$http_x_forwarded_for",'
            '"upstream_addr":"$upstream_addr",'
            '"upstream_status":"$upstream_status",'
            '"upstream_response_time":"$upstream_response_time",'
            '"upstream_connect_time":"$upstream_connect_time",'
            '"upstream_header_time":"$upstream_header_time"'
        '}';

    access_log /var/log/nginx/access.log main;
    access_log /var/log/nginx/access.json.log json_combined;

    # ========================================================================
    # 基本性能配置
    # ========================================================================

    sendfile on;  # 高效文件传输
    tcp_nopush on;  # 优化数据包发送
    tcp_nodelay on;  # 禁用Nagle算法，降低延迟
    keepalive_timeout 65;  # 保持连接超时时间
    keepalive_requests 100;  # 单个连接最大请求数
    types_hash_max_size 2048;
    server_tokens off;  # 隐藏Nginx版本号

    # 客户端配置
    client_max_body_size 500M;  # 最大上传文件大小
    client_body_buffer_size 128k;
    client_header_buffer_size 4k;
    large_client_header_buffers 4 16k;
    client_body_timeout 60s;
    client_header_timeout 60s;
    send_timeout 60s;

    # 代理缓冲配置
    proxy_buffering on;
    proxy_buffer_size 8k;
    proxy_buffers 32 8k;
    proxy_busy_buffers_size 16k;
    proxy_temp_file_write_size 16k;

    # ========================================================================
    # Gzip压缩配置
    # ========================================================================

    gzip on;
    gzip_vary on;
    gzip_min_length 1024;  # 小于1KB的不压缩
    gzip_proxied any;
    gzip_comp_level 6;  # 压缩级别（1-9）
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        application/x-javascript
        image/svg+xml;
    gzip_disable "msie6";  # 禁用IE6的gzip

    # ========================================================================
    # 缓存配置
    # ========================================================================

    # 代理缓存路径
    proxy_cache_path /var/cache/nginx/api
                     levels=1:2
                     keys_zone=api_cache:10m
                     max_size=1g
                     inactive=60m
                     use_temp_path=off;

    # 静态文件缓存
    proxy_cache_path /var/cache/nginx/static
                     levels=1:2
                     keys_zone=static_cache:10m
                     max_size=5g
                     inactive=7d
                     use_temp_path=off;

    # ========================================================================
    # 上游服务器定义（后端微服务集群）- 本地开发环境
    # ========================================================================

    # 用户服务集群
    upstream user_service {
        least_conn;  # 最少连接负载均衡
        server localhost:8080 max_fails=3 fail_timeout=30s weight=1;
        # 可以添加更多实例用于负载均衡测试
        # server localhost:8180 max_fails=3 fail_timeout=30s weight=1;
        keepalive 32;  # 保持32个空闲连接
        keepalive_timeout 60s;
        keepalive_requests 100;
    }

    # 会议服务集群
    upstream meeting_service {
        least_conn;
        server localhost:8082 max_fails=3 fail_timeout=30s weight=1;
        # server localhost:8182 max_fails=3 fail_timeout=30s weight=1;
        keepalive 32;
        keepalive_timeout 60s;
        keepalive_requests 100;
    }

    # 信令服务集群（WebSocket需要会话保持）
    upstream signaling_service {
        ip_hash;  # 基于客户端IP的会话保持
        server localhost:8081 max_fails=3 fail_timeout=30s weight=1;
        # server localhost:8181 max_fails=3 fail_timeout=30s weight=1;
        keepalive 64;  # WebSocket需要更多保持连接
        keepalive_timeout 3600s;  # WebSocket长连接
    }

    # 媒体服务集群
    upstream media_service {
        least_conn;
        server localhost:8083 max_fails=3 fail_timeout=30s weight=1;
        # server localhost:8183 max_fails=3 fail_timeout=30s weight=1;
        keepalive 32;
        keepalive_timeout 60s;
        keepalive_requests 100;
    }

    # AI服务集群
    upstream ai_service {
        least_conn;
        server localhost:8085 max_fails=3 fail_timeout=30s weight=1;
        # server localhost:8185 max_fails=3 fail_timeout=30s weight=1;
        keepalive 16;  # AI服务连接数较少
        keepalive_timeout 120s;
    }

    # ========================================================================
    # 限流配置（防止DDoS和滥用）
    # ========================================================================

    # 基于IP的限流区域
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;  # API通用限流
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/s;   # 认证接口限流
    limit_req_zone $binary_remote_addr zone=upload_limit:10m rate=2r/s; # 上传接口限流
    limit_req_zone $binary_remote_addr zone=ws_limit:10m rate=10r/s;    # WebSocket限流
    limit_req_zone $binary_remote_addr zone=ai_limit:10m rate=5r/s;     # AI接口限流

    # 基于用户的限流（需要从JWT中提取user_id）
    map $http_authorization $user_id {
        default "";
        ~^Bearer\s+(.+)$ $1;
    }
    limit_req_zone $user_id zone=user_api_limit:10m rate=200r/s;

    # 连接数限制
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;
    limit_conn_zone $server_name zone=server_conn_limit:10m;

    # ========================================================================
    # IP黑名单和白名单
    # ========================================================================

    # IP黑名单映射
    geo $blocked_ip {
        default 0;
        # 示例：阻止特定IP
        # 192.168.1.100 1;
        # 10.0.0.0/8 1;
    }

    # ========================================================================
    # 安全头部映射
    # ========================================================================

    # 根据请求路径设置CSP策略
    map $request_uri $csp_policy {
        default "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' ws: wss: http: https:; media-src 'self' blob:; frame-src 'self';";
        ~^/api/ "default-src 'none'; frame-ancestors 'none';";
    }

    # ========================================================================
    # 请求ID生成（用于追踪）
    # ========================================================================

    map $request_id $formatted_request_id {
        default $request_id;
    }

    # ========================================================================
    # HTTP服务器 - 本地开发环境（端口8000）
    # ========================================================================
    server {
        listen 8000;
        listen [::]:8000;
        server_name localhost 127.0.0.1;

        # ====================================================================
        # 安全头部
        # ====================================================================
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy $csp_policy always;
        add_header Permissions-Policy "geolocation=(), microphone=(self), camera=(self)" always;

        # 添加请求ID用于追踪
        add_header X-Request-ID $request_id always;

        # CORS配置（开发环境允许所有来源）
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Request-ID" always;
        add_header Access-Control-Expose-Headers "Content-Length,Content-Range,X-Request-ID,X-Cache-Status" always;
        add_header Access-Control-Max-Age 1728000 always;

        # OPTIONS请求处理
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        # ====================================================================
        # IP黑名单检查
        # ====================================================================
        if ($blocked_ip) {
            return 403 '{"code":403,"message":"Access denied","timestamp":"$time_iso8601"}';
        }

        # ====================================================================
        # 连接数限制
        # ====================================================================
        limit_conn conn_limit 50;  # 每个IP最多50个并发连接（开发环境放宽）
        limit_conn server_conn_limit 10000;  # 服务器总连接数限制

        # ====================================================================
        # 健康检查端点
        # ====================================================================
        location /health {
            access_log off;
            return 200 '{"status":"healthy","timestamp":"$time_iso8601","gateway":"nginx"}';
            add_header Content-Type application/json;
        }

        # 详细健康检查（包含后端服务状态）
        location /health/detailed {
            access_log off;
            return 200 '{"status":"healthy","services":["user","meeting","signaling","media","ai"],"timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        # ====================================================================
        # WebSocket信令服务
        # ====================================================================
        location /ws/signaling {
            # WebSocket限流
            limit_req zone=ws_limit burst=10 nodelay;

            # 代理到信令服务
            proxy_pass http://signaling_service;
            proxy_http_version 1.1;

            # WebSocket升级头
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # 标准代理头
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;

            # WebSocket特殊配置
            proxy_read_timeout 86400s;  # 24小时
            proxy_send_timeout 86400s;
            proxy_connect_timeout 60s;

            # 禁用缓冲
            proxy_buffering off;

            # 错误处理
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            proxy_next_upstream_tries 2;
        }

        # ====================================================================
        # API路由 - 认证服务（公开接口）
        # ====================================================================
        location /api/v1/auth {
            # 认证接口特殊限流（防止暴力破解）
            limit_req zone=auth_limit burst=5 nodelay;

            # 代理到用户服务
            proxy_pass http://user_service;

            # 标准代理头
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;

            # 超时配置
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # 错误处理
            proxy_next_upstream error timeout http_500 http_502 http_503;
            proxy_next_upstream_tries 2;

            # 禁用缓存（认证接口不应缓存）
            proxy_no_cache 1;
            proxy_cache_bypass 1;
        }

        # ====================================================================
        # API路由 - 用户服务
        # ====================================================================
        location /api/v1/users {
            # 通用API限流
            limit_req zone=api_limit burst=50 nodelay;
            limit_req zone=user_api_limit burst=100 nodelay;

            # 代理到用户服务
            proxy_pass http://user_service;

            # 标准代理头
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;

            # 超时配置
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # 错误处理
            proxy_next_upstream error timeout http_500 http_502 http_503;
            proxy_next_upstream_tries 2;

            # 缓存配置（GET请求可缓存）
            proxy_cache api_cache;
            proxy_cache_methods GET HEAD;
            proxy_cache_valid 200 5m;
            proxy_cache_valid 404 1m;
            proxy_cache_key "$scheme$request_method$host$request_uri$http_authorization";
            proxy_cache_bypass $http_cache_control;
            add_header X-Cache-Status $upstream_cache_status;
        }

        # ====================================================================
        # API路由 - 管理员用户接口
        # ====================================================================
        location /api/v1/admin {
            # 通用API限流
            limit_req zone=api_limit burst=50 nodelay;

            # 代理到用户服务
            proxy_pass http://user_service;

            # 标准代理头
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;

            # 超时配置
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # 错误处理
            proxy_next_upstream error timeout http_500 http_502 http_503;
            proxy_next_upstream_tries 2;
        }

        # ====================================================================
        # API路由 - 会议服务
        # ====================================================================
        location /api/v1/meetings {
            # 通用API限流
            limit_req zone=api_limit burst=50 nodelay;
            limit_req zone=user_api_limit burst=100 nodelay;

            # 代理到会议服务
            proxy_pass http://meeting_service;

            # 标准代理头
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;

            # 超时配置
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # 错误处理
            proxy_next_upstream error timeout http_500 http_502 http_503;
            proxy_next_upstream_tries 2;

            # 缓存配置
            proxy_cache api_cache;
            proxy_cache_methods GET HEAD;
            proxy_cache_valid 200 2m;
            proxy_cache_key "$scheme$request_method$host$request_uri$http_authorization";
            proxy_cache_bypass $http_cache_control;
            add_header X-Cache-Status $upstream_cache_status;
        }

        # ====================================================================
        # API路由 - 媒体服务（文件上传）
        # ====================================================================
        location /api/v1/media/upload {
            # 上传接口特殊限流
            limit_req zone=upload_limit burst=5 nodelay;

            # 大文件上传配置
            client_max_body_size 1000M;
            client_body_buffer_size 256k;
            proxy_request_buffering off;  # 禁用请求缓冲，支持流式上传

            # 代理到媒体服务
            proxy_pass http://media_service;

            # 标准代理头
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;

            # 长超时用于大文件上传
            proxy_connect_timeout 60s;
            proxy_send_timeout 600s;  # 10分钟
            proxy_read_timeout 600s;

            # 错误处理
            proxy_next_upstream error timeout http_500 http_502 http_503;
            proxy_next_upstream_tries 1;  # 上传不重试
        }

        # ====================================================================
        # API路由 - 媒体服务（其他接口）
        # ====================================================================
        location /api/v1/media {
            # 通用API限流
            limit_req zone=api_limit burst=50 nodelay;

            # 代理到媒体服务
            proxy_pass http://media_service;

            # 标准代理头
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;

            # 超时配置
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # 错误处理
            proxy_next_upstream error timeout http_500 http_502 http_503;
            proxy_next_upstream_tries 2;
        }

        # ====================================================================
        # API路由 - AI服务
        # ====================================================================
        location /api/v1/ai {
            # AI接口限流（AI处理较慢，限制更严格）
            limit_req zone=ai_limit burst=10 nodelay;

            # 代理到AI服务
            proxy_pass http://ai_service;

            # 标准代理头
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;

            # AI处理可能需要更长时间
            proxy_connect_timeout 30s;
            proxy_send_timeout 180s;  # 3分钟
            proxy_read_timeout 180s;

            # 错误处理
            proxy_next_upstream error timeout http_500 http_502 http_503;
            proxy_next_upstream_tries 2;

            # 禁用缓存（AI结果不应缓存）
            proxy_no_cache 1;
            proxy_cache_bypass 1;
        }

        # ====================================================================
        # Nginx状态页面（监控）
        # ====================================================================
        location /nginx_status {
            stub_status on;
            access_log off;

            # 限制访问（仅本地）
            allow 127.0.0.1;
            allow ::1;
            deny all;
        }

        # ====================================================================
        # 错误页面
        # ====================================================================

        # 自定义错误页面
        error_page 400 /error/400.json;
        error_page 401 /error/401.json;
        error_page 403 /error/403.json;
        error_page 404 /error/404.json;
        error_page 429 /error/429.json;
        error_page 500 502 503 504 /error/50x.json;

        # 错误页面处理
        location ^~ /error/ {
            internal;
            default_type application/json;

            location = /error/400.json {
                return 400 '{"code":400,"message":"Bad Request","timestamp":"$time_iso8601"}';
            }

            location = /error/401.json {
                return 401 '{"code":401,"message":"Unauthorized","timestamp":"$time_iso8601"}';
            }

            location = /error/403.json {
                return 403 '{"code":403,"message":"Forbidden","timestamp":"$time_iso8601"}';
            }

            location = /error/404.json {
                return 404 '{"code":404,"message":"Not Found","timestamp":"$time_iso8601"}';
            }

            location = /error/429.json {
                return 429 '{"code":429,"message":"Too Many Requests","timestamp":"$time_iso8601"}';
            }

            location = /error/50x.json {
                return 500 '{"code":500,"message":"Internal Server Error","timestamp":"$time_iso8601"}';
            }
        }

        # ====================================================================
        # 默认拒绝所有其他请求
        # ====================================================================
        location / {
            return 404 '{"code":404,"message":"Endpoint not found","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
    }
}


