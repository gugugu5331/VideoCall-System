# AWS EKS集成配置
# AWS Application Load Balancer (ALB) Ingress Controller
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aws-load-balancer-controller
  namespace: kube-system
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT-ID:role/AmazonEKSLoadBalancerControllerRole
---
# ALB Ingress配置
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: video-conference-alb
  namespace: video-conference
  annotations:
    # ALB配置
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/load-balancer-name: video-conference-alb
    
    # SSL配置
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:region:account:certificate/cert-id
    
    # 健康检查
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '3'
    
    # 访问日志
    alb.ingress.kubernetes.io/load-balancer-attributes: |
      access_logs.s3.enabled=true,
      access_logs.s3.bucket=video-conference-alb-logs,
      access_logs.s3.prefix=alb-logs
    
    # 安全组
    alb.ingress.kubernetes.io/security-groups: sg-xxxxxxxxx
    alb.ingress.kubernetes.io/subnets: subnet-xxxxxxxx,subnet-yyyyyyyy
spec:
  rules:
  - host: your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: web-client-service
            port:
              number: 80
  - host: api.your-domain.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: gateway-service
            port:
              number: 8080
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: signaling-service
            port:
              number: 8083
---
# AWS Network Load Balancer for WebSocket
apiVersion: v1
kind: Service
metadata:
  name: signaling-nlb
  namespace: video-conference
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "3600"
    service.beta.kubernetes.io/aws-load-balancer-access-log-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-name: "video-conference-nlb-logs"
spec:
  type: LoadBalancer
  ports:
  - name: websocket
    port: 8083
    targetPort: 8083
    protocol: TCP
  selector:
    app: signaling-service
---
# CloudFront分发配置 (需要在AWS控制台配置)
# 这里提供配置参考
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloudfront-config
  namespace: video-conference
data:
  cloudfront-config.json: |
    {
      "DistributionConfig": {
        "CallerReference": "video-conference-2024",
        "Comment": "Video Conference System CDN",
        "DefaultRootObject": "index.html",
        "Origins": {
          "Quantity": 2,
          "Items": [
            {
              "Id": "ALB-Origin",
              "DomainName": "video-conference-alb-xxxxxxxxx.region.elb.amazonaws.com",
              "CustomOriginConfig": {
                "HTTPPort": 80,
                "HTTPSPort": 443,
                "OriginProtocolPolicy": "https-only",
                "OriginSslProtocols": {
                  "Quantity": 1,
                  "Items": ["TLSv1.2"]
                }
              }
            },
            {
              "Id": "S3-Static-Origin",
              "DomainName": "video-conference-static.s3.amazonaws.com",
              "S3OriginConfig": {
                "OriginAccessIdentity": ""
              }
            }
          ]
        },
        "DefaultCacheBehavior": {
          "TargetOriginId": "ALB-Origin",
          "ViewerProtocolPolicy": "redirect-to-https",
          "MinTTL": 0,
          "ForwardedValues": {
            "QueryString": true,
            "Cookies": {"Forward": "all"},
            "Headers": {
              "Quantity": 4,
              "Items": ["Authorization", "CloudFront-Forwarded-Proto", "Host", "Origin"]
            }
          },
          "TrustedSigners": {
            "Enabled": false,
            "Quantity": 0
          }
        },
        "CacheBehaviors": {
          "Quantity": 2,
          "Items": [
            {
              "PathPattern": "/api/*",
              "TargetOriginId": "ALB-Origin",
              "ViewerProtocolPolicy": "https-only",
              "MinTTL": 0,
              "MaxTTL": 0,
              "DefaultTTL": 0,
              "ForwardedValues": {
                "QueryString": true,
                "Cookies": {"Forward": "all"},
                "Headers": {"Quantity": 1, "Items": ["*"]}
              }
            },
            {
              "PathPattern": "/static/*",
              "TargetOriginId": "S3-Static-Origin",
              "ViewerProtocolPolicy": "https-only",
              "MinTTL": 86400,
              "MaxTTL": 31536000,
              "DefaultTTL": 86400
            }
          ]
        },
        "Enabled": true,
        "PriceClass": "PriceClass_All"
      }
    }
